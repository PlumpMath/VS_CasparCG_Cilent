<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label1.Text" xml:space="preserve">
    <value>LOAD

LOAD [video_channel:int]{-[layer:int]|-0}  [clip:string] {"additional parameters"}
Loads a clip to the foreground and plays the first frame before pausing. If any clip is playing on the target foreground then this clip will be replaced.
Examples:
LOAD 1 MY_FILE
LOAD 1-1 MY_FILE
Note: See LOADBG for additional details.</value>
  </data>
  <data name="label2.Text" xml:space="preserve">
    <value>PLAY

PLAY [video_channel:int]{-[layer:int]|-0} {[clip:string]} {"additional parameters"}
Moves clip from background to foreground and starts playing it. If a transition (see LOADBG) is prepared, it will be executed.
If additional parameters (see LOADBG) are provided then the provided clip will first be loaded to the background.
Examples:
PLAY 1 MY_FILE PUSH 20 EASEINSINE
PLAY 1-1 MY_FILE SLIDE 10 LEFT
PLAY 1-0 MY_FILE</value>
  </data>
  <data name="label3.Text" xml:space="preserve">
    <value>PAUSE

PAUSE [video_channel:int]{-[layer:int]|-0}
Pauses foreground clip, from version 2.0.7 the RESUME command can be used to start playback after this command has been used.
Examples:
PAUSE 1
PAUSE 1-1</value>
  </data>
  <data name="label6.Text" xml:space="preserve">
    <value>CLEAR

CLEAR [video_channel:int]{-[layer:int]}
Removes all clips (both foreground and background). If no layer is specified then all layers in the specified video_channel are cleared.
Examples:
CLEAR 1
Clears everything from the entire channel 1.
CLEAR 1-3</value>
  </data>
  <data name="label8.Text" xml:space="preserve">
    <value>SWAP

SWAP [channel1:int]{-[layer1:int]} [channel2:int]{-[layer2:int]}
Swaps layers between channels (both foreground and background will be swapped). If layers are not specified then all layers in respective video_channel will be swapped.
Examples:
SWAP 1 2
SWAP 1-1 2-3</value>
  </data>
  <data name="label9.Text" xml:space="preserve">
    <value>ADD

ADD [video_channel:int] [consumer:string] [parameters:string]
Adds a consumer to the video channel specified, the string consumer will be parsed by available registered consumer factories. If a successful match is found a consumer will be created and added to the video_channel. Different consumers require different parameters, some examples are below. Consumers can alternatively be specified by adding them to the CasparCG config file.
Examples:
ADD 1 DECKLINK 1
ADD 1 BLUEFISH 2
ADD 1 SCREEN
ADD 1 AUDIO
ADD 1 IMAGE filename
ADD 1 FILE filename.mov
ADD 1 FILE filename.mov SEPARATE_KEY
The streaming consumer is an implementation of the ffmpeg_consumer and supports many of the same arguments, available from version 2.0.7 Beta 2.
ADD 1 STREAM udp://localhost:5004 -vcodec libx264 -tune zerolatency -preset ultrafast -crf 25 -format mpegts -vf scale=240:180</value>
  </data>
  <data name="label11.Text" xml:space="preserve">
    <value>PRINT

PRINT [video_channel:int]
Saves an RGBA PNG bitmap still image of the contents of the specified channel in the media folder.

Examples:
PRINT 1
Will produce a PNG image with the current date and time as the filename for example 20130620T192220.png</value>
  </data>
  <data name="label10.Text" xml:space="preserve">
    <value>REMOVE

REMOVE [video_channel:int] [parameters:string]
Removes an existing consumer from video_channel.
Examples:
REMOVE 1 DECKLINK 1
REMOVE 1 BLUEFISH 2
REMOVE 1 SCREEN
REMOVE 1 AUDIO
REMOVE 1 FILE</value>
  </data>
</root>